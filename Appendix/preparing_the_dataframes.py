# -*- coding: utf-8 -*-
"""Preparing the Dataframes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ERDPG4h797yMF1v1T2AbYj3bgk6HyDaQ
"""

!pip install ace_tools

import pandas as pd

# Load the merged CSV
df = pd.read_csv('/content/NBA-Cleaned-Merged.csv')

# Preview
df.head()

"""Most Scoring Quarters"""

# Ensure score columns are integers
df['HOME_SCORE'] = pd.to_numeric(df['HOME_SCORE'], errors='coerce')
df['VISITOR_SCORE'] = pd.to_numeric(df['VISITOR_SCORE'], errors='coerce')

# Drop rows where scores are missing
df = df.dropna(subset=['HOME_SCORE', 'VISITOR_SCORE'])

# Group home team scores
home_scores = df.groupby(['PLAYER1_TEAM_NICKNAME', 'PERIOD'])['HOME_SCORE'].max().reset_index()
home_scores.columns = ['Team', 'Quarter', 'Score']

# Group visitor team scores
visitor_scores = df.groupby(['PLAYER2_TEAM_NICKNAME', 'PERIOD'])['VISITOR_SCORE'].max().reset_index()
visitor_scores.columns = ['Team', 'Quarter', 'Score']

# Combine both
all_scores = pd.concat([home_scores, visitor_scores])

# Drop rows with no team name
all_scores = all_scores.dropna(subset=['Team'])

# Group again to get total scores per team per quarter
team_quarter_scores = all_scores.groupby(['Team', 'Quarter'])['Score'].sum().reset_index()

# For each team, find the quarter with the highest total score
most_scoring_quarters = team_quarter_scores.loc[
    team_quarter_scores.groupby('Team')['Score'].idxmax()
].reset_index(drop=True)

# Sort alphabetically
most_scoring_quarters = most_scoring_quarters.sort_values(by='Team')

most_scoring_quarters.head()

most_scoring_quarters.to_csv("most_scoring_quarters.csv")

"""Top 5 Teams"""

# Group total home scores per team
home_team_scores = df.groupby('PLAYER1_TEAM_NICKNAME')['HOME_SCORE'].max().reset_index()
home_team_scores.columns = ['Team', 'Points_Home']

# Group total visitor scores per team
visitor_team_scores = df.groupby('PLAYER2_TEAM_NICKNAME')['VISITOR_SCORE'].max().reset_index()
visitor_team_scores.columns = ['Team', 'Points_Away']

# Combine both with outer join to handle teams appearing in only one role
total_scores = pd.merge(home_team_scores, visitor_team_scores, on='Team', how='outer').fillna(0)

# Sum both home and away scores
total_scores['Total_Points'] = total_scores['Points_Home'] + total_scores['Points_Away']

# Get top 5 scoring teams
top_5_teams = total_scores.sort_values(by='Total_Points', ascending=False).head(5).reset_index(drop=True)

top_5_teams.head()

top_5_teams.to_csv("top_5_teams.csv")

"""Percentage of players who have scored 40 points or more in a single match

"""

import pandas as pd
import re

# Function to extract points from scoring descriptions
def extract_points(description):
    if pd.isna(description):
        return 0
    match = re.search(r'\((\d+)\s+PTS\)', description)
    return int(match.group(1)) if match else 0

# Apply the point extraction function
df['points_scored'] = df.apply(
    lambda row: extract_points(row['HOMEDESCRIPTION']) if pd.notna(row['HOMEDESCRIPTION']) else extract_points(row['VISITORDESCRIPTION']),
    axis=1
)

# Aggregate points per player per game
player_game_points = df.groupby(['PLAYER1_NAME', 'EVENTNUM'])['points_scored'].sum().reset_index()
player_game_points.columns = ['Player', 'Game_ID', 'Total_Points']

# Filter those who scored 40+
players_40_or_more = player_game_points[player_game_points['Total_Points'] >= 40].sort_values(by='Total_Points', ascending=False).reset_index(drop=True)

# Calculate percentage
total_players = len(player_game_points)
total_40_plus = len(players_40_or_more)
percentage_40_plus = (total_40_plus / total_players) * 100

print(f"{total_40_plus} out of {total_players} players scored 40+ points in a single match.")
print(f"Percentage: {percentage_40_plus:.2f}%")

players_40_or_more.head()

players_40_or_more.to_csv("players_40_or_more.csv")

"""The total number of matches won, lost"""

# Step 1: Get final scores per match
match_scores = df.groupby('EVENTNUM').agg({
    'PLAYER1_TEAM_NICKNAME': 'last',
    'PLAYER2_TEAM_NICKNAME': 'last',
    'HOME_SCORE': 'max',
    'VISITOR_SCORE': 'max'
}).reset_index()

match_scores.columns = ['Match_ID', 'Home_Team', 'Away_Team', 'Home_Score', 'Visitor_Score']

# Step 2: Determine results
results = []

for _, row in match_scores.iterrows():
    if row['Home_Score'] > row['Visitor_Score']:
        results.append({'Team': row['Home_Team'], 'Result': 'Win'})
        results.append({'Team': row['Away_Team'], 'Result': 'Loss'})
    elif row['Visitor_Score'] > row['Home_Score']:
        results.append({'Team': row['Away_Team'], 'Result': 'Win'})
        results.append({'Team': row['Home_Team'], 'Result': 'Loss'})
    else:
        # In case of draw (rare)
        results.append({'Team': row['Home_Team'], 'Result': 'Draw'})
        results.append({'Team': row['Away_Team'], 'Result': 'Draw'})

results_df = pd.DataFrame(results)

# Step 3: Count wins/losses per team
team_results = results_df.groupby(['Team', 'Result']).size().unstack(fill_value=0).reset_index()

# Optional: Fill missing 'Win' or 'Loss' with 0
if 'Win' not in team_results.columns:
    team_results['Win'] = 0
if 'Loss' not in team_results.columns:
    team_results['Loss'] = 0

# Step 4: Identify top scoring player per team per match
player_scores = df.groupby(['EVENTNUM', 'PLAYER1_TEAM_NICKNAME', 'PLAYER1_NAME'])['points_scored'].sum().reset_index()
player_scores.columns = ['Match_ID', 'Team', 'Player', 'Total_Points']

# Get top scorer per team per match
top_scorers = player_scores.sort_values(['Match_ID', 'Team', 'Total_Points'], ascending=[True, True, False]).drop_duplicates(['Match_ID', 'Team'])

# Step 5: Join top scorers to win/loss results (optional summary)
summary_df = team_results.merge(
    top_scorers.groupby('Team')['Player'].agg(lambda x: x.mode()[0] if not x.mode().empty else None).reset_index(),
    on='Team', how='left'
)
summary_df.rename(columns={'Player': 'Top_Scorer'}, inplace=True)

summary_df.head()

summary_df.to_csv("summary_df.csv")